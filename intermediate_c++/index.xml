<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Intermediate C&#43;&#43; on Peach Colony</title>
    <link>https://ruthnot.github.io/intermediate_c&#43;&#43;/</link>
    <description>Recent content in Intermediate C&#43;&#43; on Peach Colony</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ruthnot.github.io/intermediate_c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Module 1: Pointers</title>
      <link>https://ruthnot.github.io/intermediate_c&#43;&#43;/module_1_pointers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruthnot.github.io/intermediate_c&#43;&#43;/module_1_pointers/</guid>
      <description>Pointers A pointer is simply a variable that holds the memory address of an object in C++. To create a pointer variable, use * plus the data type. such as:
int num = 3; int* pNum = &amp;amp;num;   Here, the &amp;amp; is the address-of operator. what we did is assigning the address of variable &amp;ldquo;num&amp;rdquo; to the pointer (pointer variable) pNum. Notice thatint* pNum and int *pNumis essentially the same.</description>
    </item>
    
    <item>
      <title>Module 2: More C&#43;&#43; Class</title>
      <link>https://ruthnot.github.io/intermediate_c&#43;&#43;/module_2_more_c&#43;&#43;_class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruthnot.github.io/intermediate_c&#43;&#43;/module_2_more_c&#43;&#43;_class/</guid>
      <description>Splitting Classes  In C++, the common practice is to create your classes as two separate files. The header files, with a .h extension on the filename, is used to contain the declarations found in the class file. Header file is more like a &amp;ldquo;manual&amp;rdquo; to the user, so that user only needs to know how to use this class, ignoring how methods are actually implemented. Declarations in the header file includes function prototypes and class constructors typically.</description>
    </item>
    
    <item>
      <title>Module 3: More OOP in C&#43;&#43;</title>
      <link>https://ruthnot.github.io/intermediate_c&#43;&#43;/module_3_more_oop_in_c&#43;&#43;/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruthnot.github.io/intermediate_c&#43;&#43;/module_3_more_oop_in_c&#43;&#43;/</guid>
      <description>Inheritance  Inheritance meaning one can write a new class that inherit the members of an existing class. The existing class is called base class, the new class is called derived class. There&amp;rsquo;re three types of inheritance in C++, public, private and protected, below are the rules:  Public Inheritance:  public in base class remains public in derived class protected in base class remains protected in derived class private in base class remains private in derived class  Protected Inheritance:  public and protected in base class becomes protected in derived class private in base class remains private in derived class  Private Inheritance:  public and protected and private in base class all becomes private in derived class   Remember, no matter which type of inheritance you choose, derived class can never access base class&amp;rsquo; private members directly.</description>
    </item>
    
    <item>
      <title>Module 4: Streams and Files</title>
      <link>https://ruthnot.github.io/intermediate_c&#43;&#43;/module_4_streams_and_files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ruthnot.github.io/intermediate_c&#43;&#43;/module_4_streams_and_files/</guid>
      <description> Stream I/O Processing Files Strings[ </description>
    </item>
    
  </channel>
</rss>